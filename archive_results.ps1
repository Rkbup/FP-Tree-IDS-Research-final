# Archive Results and Create Backup
# This script creates a timestamped archive of all experiment results

param(
    [string]$ArchiveDir = ".\archives",
    [switch]$IncludeCode = $false
)

$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$archiveName = "fp-tree-results-$timestamp"

Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "   FP-Tree IDS - Results Archive Creator" -ForegroundColor Green
Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host ""

# Check if results exist
if (-not (Test-Path ".\results-final")) {
    Write-Host "✗ No results found in .\results-final" -ForegroundColor Red
    Write-Host "  Please extract results first: .\extract_results.ps1" -ForegroundColor Yellow
    exit 1
}

# Create archive directory
Write-Host "[Step 1/4] Creating archive directory..." -ForegroundColor Yellow
if (-not (Test-Path $ArchiveDir)) {
    New-Item -ItemType Directory -Path $ArchiveDir -Force | Out-Null
}
$archivePath = Join-Path $ArchiveDir $archiveName
New-Item -ItemType Directory -Path $archivePath -Force | Out-Null
Write-Host "✓ Archive directory created: $archivePath" -ForegroundColor Green
Write-Host ""

# Copy results
Write-Host "[Step 2/4] Copying results..." -ForegroundColor Yellow
Copy-Item -Path ".\results-final\*" -Destination $archivePath -Recurse -Force
$fileCount = (Get-ChildItem -Path $archivePath -Recurse -File).Count
Write-Host "✓ Copied $fileCount result files" -ForegroundColor Green
Write-Host ""

# Create metadata file
Write-Host "[Step 3/4] Creating metadata..." -ForegroundColor Yellow
$metadata = @{
    ArchiveDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    ExperimentType = "FP-Tree IDS Research"
    Dataset = "CIC-IDS2017"
    Results = @{
        MainExperiment = (Test-Path (Join-Path $archivePath "main"))
        SyntheticExperiment = (Test-Path (Join-Path $archivePath "synthetic"))
        FileCount = $fileCount
    }
} | ConvertTo-Json -Depth 10

$metadataFile = Join-Path $archivePath "archive_metadata.json"
$metadata | Out-File -FilePath $metadataFile -Encoding UTF8
Write-Host "✓ Metadata created" -ForegroundColor Green
Write-Host ""

# Create README
$readme = @"
# FP-Tree IDS Experiment Results Archive

**Archive Date:** $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
**Experiment:** FP-Tree IDS Research with CIC-IDS2017 Dataset

## Contents

### Main Experiment (Real Dataset)
- Dataset: CIC-IDS2017 (8 CSV files, ~864MB)
- Duration: 4-5 hours
- Results location: `./main/`

### Synthetic Experiment
- Generated synthetic attack data
- Duration: 2-3 hours  
- Results location: `./synthetic/`

## Directory Structure

```
$archiveName/
├── main/                    # Main experiment results (CIC-IDS2017)
│   ├── results/            # Output files
│   └── experiment.log      # Execution logs
├── synthetic/              # Synthetic experiment results
│   ├── results/            # Output files
│   └── experiment.log      # Execution logs
└── archive_metadata.json   # Archive metadata
```

## Key Files

- **Figures:** PNG/PDF visualization files
- **Tables:** CSV/JSON data files
- **Logs:** Complete experiment execution logs
- **Statistical Analysis:** Statistical test results

## Reproduction

To reproduce these results:
1. Use Docker image: `fp-tree-ids:latest`
2. Deploy to Kubernetes using configuration in `/k8s/`
3. See main repository README for detailed instructions

## Notes

- All experiments run on Kubernetes (Docker Desktop)
- Results extracted from pods using `extract_results.ps1`
- Archive created automatically with timestamp
- Source code available in main repository

---
Generated by FP-Tree IDS Research Framework
"@

$readmeFile = Join-Path $archivePath "README.md"
$readme | Out-File -FilePath $readmeFile -Encoding UTF8
Write-Host "✓ README created" -ForegroundColor Green
Write-Host ""

# Optionally include code
if ($IncludeCode) {
    Write-Host "[Optional] Including source code..." -ForegroundColor Yellow
    $codeDir = Join-Path $archivePath "source_code"
    New-Item -ItemType Directory -Path $codeDir -Force | Out-Null
    
    # Copy key directories
    $dirsToInclude = @("src", "experiments", "k8s", "config")
    foreach ($dir in $dirsToInclude) {
        if (Test-Path $dir) {
            Copy-Item -Path $dir -Destination $codeDir -Recurse -Force
        }
    }
    
    # Copy key files
    $filesToInclude = @("README.md", "requirements.txt", "Dockerfile", "environment.yml")
    foreach ($file in $filesToInclude) {
        if (Test-Path $file) {
            Copy-Item -Path $file -Destination $codeDir -Force
        }
    }
    
    Write-Host "✓ Source code included" -ForegroundColor Green
    Write-Host ""
}

# Create ZIP archive
Write-Host "[Step 4/4] Creating ZIP archive..." -ForegroundColor Yellow
$zipFile = "$archivePath.zip"
try {
    Compress-Archive -Path $archivePath -DestinationPath $zipFile -Force
    $zipSize = (Get-Item $zipFile).Length
    Write-Host "✓ ZIP archive created" -ForegroundColor Green
    Write-Host "  File: $zipFile" -ForegroundColor Gray
    Write-Host "  Size: $([math]::Round($zipSize/1MB, 2)) MB" -ForegroundColor Gray
} catch {
    Write-Host "⚠️  Failed to create ZIP: $_" -ForegroundColor Yellow
    Write-Host "  Uncompressed archive available at: $archivePath" -ForegroundColor Gray
}
Write-Host ""

Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host "   Archive Complete!" -ForegroundColor Green
Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
Write-Host ""
Write-Host "Archive created successfully!" -ForegroundColor Green
Write-Host ""
Write-Host "📁 Archive location:" -ForegroundColor Cyan
Write-Host "   Directory: $archivePath" -ForegroundColor Gray
if (Test-Path $zipFile) {
    Write-Host "   ZIP file:  $zipFile" -ForegroundColor Gray
}
Write-Host ""
Write-Host "📊 Archive contents:" -ForegroundColor Cyan
Write-Host "   Total files: $fileCount" -ForegroundColor Gray
$totalSize = (Get-ChildItem -Path $archivePath -Recurse -File | Measure-Object -Property Length -Sum).Sum
Write-Host "   Total size: $([math]::Round($totalSize/1MB, 2)) MB" -ForegroundColor Gray
Write-Host ""
Write-Host "═══════════════════════════════════════════════════════════════" -ForegroundColor Cyan
